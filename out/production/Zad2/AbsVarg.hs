

module AbsVarg where

-- Haskell module generated by the BNF converter




newtype UIdent = UIdent String deriving (Eq, Ord, Show, Read)
newtype LIdent = LIdent String deriving (Eq, Ord, Show, Read)
data Program = Prog [Import] [ClassDef]
  deriving (Eq, Ord, Show, Read)

data Import = IImport UIdent
  deriving (Eq, Ord, Show, Read)

data TypeParam = ITemplTypeParam LIdent | IPrimTypeParam UIdent
  deriving (Eq, Ord, Show, Read)

data ConstrTypeParam
    = UnconstrTypeParam TypeParam
    | SupConstrTypeParam TypeParam Type
    | InfConstrTypeParam TypeParam Type
  deriving (Eq, Ord, Show, Read)

data ArgDef = IArgDef LIdent Type
  deriving (Eq, Ord, Show, Read)

data PrimType
    = IPrimType UIdent [ConstrTypeParam]
    | ITempType LIdent [ConstrTypeParam]
  deriving (Eq, Ord, Show, Read)

data Type = IType [PrimType]
  deriving (Eq, Ord, Show, Read)

data Class = IClass UIdent Type
  deriving (Eq, Ord, Show, Read)

data ClassDef
    = StrDef [ClassModif] UIdent [ClassField]
    | ClsDef [ClassModif] UIdent Implementing Deriving ClassContent
    | TempDef [ClassModif] UIdent [ConstrTypeParam] Implementing Deriving ClassContent
  deriving (Eq, Ord, Show, Read)

data Implementing = Impl [Class] | NoImpl
  deriving (Eq, Ord, Show, Read)

data Deriving = Deriv Class | NoDeriv
  deriving (Eq, Ord, Show, Read)

data ClassModif
    = ClassModif_module | ClassModif_interface | ClassModif_sealed
  deriving (Eq, Ord, Show, Read)

data ClassContent = ClassCont [MemberDef] [FunDef]
  deriving (Eq, Ord, Show, Read)

data MemberDef = EMembDef UIdent | MembDef UIdent [ClassField]
  deriving (Eq, Ord, Show, Read)

data FunDef
    = RFunDef [FunModif] LIdent [ArgDef] Type Expr
    | StubDef [FunModif] LIdent [ArgDef] Type
  deriving (Eq, Ord, Show, Read)

data FunModif
    = FunModif_static
    | FunModif_internal
    | FunModif_implement
    | FunModif_final
  deriving (Eq, Ord, Show, Read)

data ClassField
    = ClsFld FieldModif LIdent Type | PClsFld LIdent Type
  deriving (Eq, Ord, Show, Read)

data FieldModif = FieldModif_public | FieldModif_internal
  deriving (Eq, Ord, Show, Read)

data Expr
    = EDefL [AsDef] Expr
    | EDef AsDef Expr
    | EMatch Expr [MatchClause]
    | EIf Expr Expr Expr
    | EApply Functorial [Arg]
    | ELam [ArgDef] Type Expr
    | EEq Expr Expr
    | ELq Expr Expr
    | EGt Expr Expr
    | ELeq Expr Expr
    | EGeq Expr Expr
    | EAdd Expr Expr
    | ESub Expr Expr
    | EMul Expr Expr
    | EDiv Expr Expr
    | EPow Expr Expr
    | EInt Integer
    | EBool BoolVal
    | EReal Double
    | EWild
    | EInstance Functorial
  deriving (Eq, Ord, Show, Read)

data AsDef = IDef Expr LIdent
  deriving (Eq, Ord, Show, Read)

data MatchClause = IMatchCl Expr Expr
  deriving (Eq, Ord, Show, Read)

data Functorial
    = ConsFunctor UIdent UIdent
    | CallMFunctor LIdent LIdent
    | CallSMFunctor UIdent LIdent
    | CallFVFunctor LIdent
  deriving (Eq, Ord, Show, Read)

data Arg = ArgExp Expr
  deriving (Eq, Ord, Show, Read)

data BoolVal = BTrue | BFalse
  deriving (Eq, Ord, Show, Read)


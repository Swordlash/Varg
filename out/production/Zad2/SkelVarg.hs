module SkelVarg where

-- Haskell module generated by the BNF converter

import AbsVarg
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog imports classdefs -> failure x
transImport :: Import -> Result
transImport x = case x of
  IImport uident -> failure x
transTypeParam :: TypeParam -> Result
transTypeParam x = case x of
  ITemplTypeParam lident -> failure x
  IPrimTypeParam uident -> failure x
transConstrTypeParam :: ConstrTypeParam -> Result
transConstrTypeParam x = case x of
  UnconstrTypeParam typeparam -> failure x
  SupConstrTypeParam typeparam type_ -> failure x
  InfConstrTypeParam typeparam type_ -> failure x
transArgDef :: ArgDef -> Result
transArgDef x = case x of
  IArgDef lident type_ -> failure x
transPrimType :: PrimType -> Result
transPrimType x = case x of
  IPrimType uident constrtypeparams -> failure x
  ITempType lident constrtypeparams -> failure x
transType :: Type -> Result
transType x = case x of
  IType primtypes -> failure x
transClass :: Class -> Result
transClass x = case x of
  IClass uident type_ -> failure x
transClassDef :: ClassDef -> Result
transClassDef x = case x of
  StrDef classmodifs uident classfields -> failure x
  ClsDef classmodifs uident implementing deriving_ classcontent -> failure x
  TempDef classmodifs uident constrtypeparams implementing deriving_ classcontent -> failure x
transImplementing :: Implementing -> Result
transImplementing x = case x of
  Impl classs -> failure x
  NoImpl -> failure x
transDeriving :: Deriving -> Result
transDeriving x = case x of
  Deriv class_ -> failure x
  NoDeriv -> failure x
transClassModif :: ClassModif -> Result
transClassModif x = case x of
  ClassModif_module -> failure x
  ClassModif_interface -> failure x
  ClassModif_sealed -> failure x
transClassContent :: ClassContent -> Result
transClassContent x = case x of
  ClassCont memberdefs fundefs -> failure x
transMemberDef :: MemberDef -> Result
transMemberDef x = case x of
  EMembDef uident -> failure x
  MembDef uident classfields -> failure x
transFunDef :: FunDef -> Result
transFunDef x = case x of
  RFunDef funmodifs lident argdefs type_ expr -> failure x
  StubDef funmodifs lident argdefs type_ -> failure x
transFunModif :: FunModif -> Result
transFunModif x = case x of
  FunModif_static -> failure x
  FunModif_internal -> failure x
  FunModif_implement -> failure x
  FunModif_final -> failure x
transClassField :: ClassField -> Result
transClassField x = case x of
  ClsFld fieldmodif lident type_ -> failure x
  PClsFld lident type_ -> failure x
transFieldModif :: FieldModif -> Result
transFieldModif x = case x of
  FieldModif_public -> failure x
  FieldModif_internal -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EDefL asdefs expr -> failure x
  EDef asdef expr -> failure x
  EMatch expr matchclauses -> failure x
  EIf expr1 expr2 expr3 -> failure x
  EApply functorial args -> failure x
  ELam argdefs type_ expr -> failure x
  EEq expr1 expr2 -> failure x
  ELq expr1 expr2 -> failure x
  EGt expr1 expr2 -> failure x
  ELeq expr1 expr2 -> failure x
  EGeq expr1 expr2 -> failure x
  EAdd expr1 expr2 -> failure x
  ESub expr1 expr2 -> failure x
  EMul expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EPow expr1 expr2 -> failure x
  EInt integer -> failure x
  EBool boolval -> failure x
  EReal double -> failure x
  EWild -> failure x
  EInstance functorial -> failure x
transAsDef :: AsDef -> Result
transAsDef x = case x of
  IDef expr lident -> failure x
transMatchClause :: MatchClause -> Result
transMatchClause x = case x of
  IMatchCl expr1 expr2 -> failure x
transFunctorial :: Functorial -> Result
transFunctorial x = case x of
  ConsFunctor uident1 uident2 -> failure x
  CallMFunctor lident1 lident2 -> failure x
  CallSMFunctor uident lident -> failure x
  CallFVFunctor lident -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgExp expr -> failure x
transBoolVal :: BoolVal -> Result
transBoolVal x = case x of
  BTrue -> failure x
  BFalse -> failure x


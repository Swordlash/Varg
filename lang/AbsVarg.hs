

module AbsVarg where

-- Haskell module generated by the BNF converter




newtype UIdent = UIdent String deriving (Eq, Ord, Show, Read)
newtype LIdent = LIdent String deriving (Eq, Ord, Show, Read)
newtype MFun = MFun String deriving (Eq, Ord, Show, Read)
data ProgramDef = Program [ImportDef] [ClassDef]
  deriving (Eq, Ord, Show, Read)

data ImportDef = Import UIdent
  deriving (Eq, Ord, Show, Read)

data TypeParam
    = InferredTypeParam LIdent | ConcreteTypeParam UIdent
  deriving (Eq, Ord, Show, Read)

data ConstrTypeParam
    = UnconstrainedTypeParam TypeParam
    | SuperConstrainedTypeParam TypeParam TypeDef
    | DerivingConstrainedTypeParam TypeParam TypeDef
  deriving (Eq, Ord, Show, Read)

data ArgDef
    = ArgumentDefinition LIdent TypeDef | InferredArgumentDef LIdent
  deriving (Eq, Ord, Show, Read)

data PrimType
    = ConcreteType UIdent [ConstrTypeParam]
    | TemplateType LIdent [ConstrTypeParam]
  deriving (Eq, Ord, Show, Read)

data TypeDef = Type [PrimType]
  deriving (Eq, Ord, Show, Read)

data ClassType = Class UIdent TypeDef
  deriving (Eq, Ord, Show, Read)

data ClassDef
    = StructDefinition [ClassModifier] UIdent [ClassField]
    | ClassDefinition [ClassModifier] UIdent IsImplementing IsDeriving ClassContents
    | TemplateDefinition [ClassModifier] UIdent [ConstrTypeParam] IsImplementing IsDeriving ClassContents
  deriving (Eq, Ord, Show, Read)

data IsImplementing = Implementing [ClassType] | NotImplementing
  deriving (Eq, Ord, Show, Read)

data IsDeriving = Deriving ClassType | NotDeriving
  deriving (Eq, Ord, Show, Read)

data ClassModifier
    = ClassModifier_module
    | ClassModifier_interface
    | ClassModifier_sealed
  deriving (Eq, Ord, Show, Read)

data ClassContents = ClassContent [MemberDef] [FunDef]
  deriving (Eq, Ord, Show, Read)

data MemberDef
    = EmptyMemberDefinition UIdent
    | MemberDefinition UIdent [ClassField]
  deriving (Eq, Ord, Show, Read)

data FunDef
    = MemberFunctionDefinition [FunctionModifier] LIdent [ArgDef] TypeDef Expr
    | AbstractFunctionDefinition [FunctionModifier] LIdent [ArgDef] TypeDef
  deriving (Eq, Ord, Show, Read)

data FunctionModifier
    = FunctionModifier_static
    | FunctionModifier_internal
    | FunctionModifier_implement
    | FunctionModifier1
  deriving (Eq, Ord, Show, Read)

data ClassField
    = ModifiedClassField FieldModifier LIdent TypeDef
    | NormalClassField LIdent TypeDef
  deriving (Eq, Ord, Show, Read)

data FieldModifier = FieldModifier_public | FieldModifier1
  deriving (Eq, Ord, Show, Read)

data Expr
    = EDefinitionsList [AsDef] Expr
    | EDefinition AsDef Expr
    | EMatch Expr [MatchClause]
    | EIfThenElse Expr Expr Expr
    | EApply Functorial [Arg]
    | ELambda [ArgDef] TypeDef Expr
    | EEq Expr Expr
    | ELq Expr Expr
    | EGt Expr Expr
    | ELeq Expr Expr
    | EGeq Expr Expr
    | EAdd Expr Expr
    | ESub Expr Expr
    | EMul Expr Expr
    | EDiv Expr Expr
    | EPow Expr Expr
    | EInt Integer
    | EReal Double
    | EWild
  deriving (Eq, Ord, Show, Read)

data AsDef = IDefinition Expr LIdent
  deriving (Eq, Ord, Show, Read)

data MatchClause = IMatchClause Expr Expr
  deriving (Eq, Ord, Show, Read)

data Functorial
    = ThisFunctor
    | SuperFunctor
    | TypeFunctor UIdent
    | InstanceFunctor LIdent
    | MemberFunctor MFun
  deriving (Eq, Ord, Show, Read)

data Arg = ArgExpr Expr | ArgFunc Functorial
  deriving (Eq, Ord, Show, Read)


module AbsVarg where

-- Haskell module generated by the BNF converter
newtype UIdent =
  UIdent String
  deriving (Eq, Ord, Show, Read)

newtype LIdent =
  LIdent String
  deriving (Eq, Ord, Show, Read)

newtype MFun =
  MFun String
  deriving (Eq, Ord, Show, Read)

data ProgramDef =
  Program [ImportDef]
          [ClassDef]
  deriving (Eq, Ord, Show, Read)

data ImportDef =
  Import UIdent
  deriving (Eq, Ord, Show, Read)

data ConstrTypeParam
  = InferredTypeParam LIdent
  | ConcreteTypeParam UIdent
  | WildcardTypeParam
  | AnotherClassTypeParam TypeDef
  | SuperConstrainedTypeParam LIdent
                              [TypeDef]
  | AnySuperConstrainedTypeParam [TypeDef]
  | DerivingConstrainedTypeParam LIdent
                                 [TypeDef]
  | AnyDerivingConstrainedTypeParam [TypeDef]
  deriving (Eq, Ord, Show, Read)

data TypeDef
  = ConcreteType UIdent
                 [ConstrTypeParam]
  | InferredType LIdent
                 [ConstrTypeParam]
  deriving (Eq, Ord, Show, Read)

data PrimFreeType
  = ConcreteTypeFreeType FreeTypeDef
  | TemplateFreeType LIdent
  | ConcreteFreeType UIdent
  deriving (Eq, Ord, Show, Read)

data FreeTypeDef
  = FreeType UIdent
             [PrimFreeType]
  | InferredFreeType LIdent
                     [PrimFreeType]
  deriving (Eq, Ord, Show, Read)

data ArgDef
  = ArgumentDefinition LIdent
                       TypeDef
  | InferredArgumentDef LIdent
  deriving (Eq, Ord, Show, Read)

data SuperclassType =
  Superclass FreeTypeDef
  deriving (Eq, Ord, Show, Read)

data ClassDef
  = StructDefinition [ClassModifier]
                     UIdent
                     [ClassField]
  | ClassDefinition [ClassModifier]
                    UIdent
                    IsDeriving
                    IsImplementing
                    ClassContents
  | TemplateDefinition [ClassModifier]
                       UIdent
                       [ConstrTypeParam]
                       IsDeriving
                       IsImplementing
                       ClassContents
  deriving (Eq, Ord, Show, Read)

data IsImplementing
  = Implementing [SuperclassType]
  | NotImplementing
  deriving (Eq, Ord, Show, Read)

data IsDeriving
  = Deriving SuperclassType
  | NotDeriving
  deriving (Eq, Ord, Show, Read)

data ClassModifier
  = ClassModifier_module
  | ClassModifier_interface
  | ClassModifier_sealed
  deriving (Eq, Ord, Show, Read)

data ClassContents =
  ClassContent [MemberDef]
               [FunDef]
  deriving (Eq, Ord, Show, Read)

data MemberDef
  = EmptyMemberDefinition UIdent
  | MemberDefinition UIdent
                     [ClassField]
  deriving (Eq, Ord, Show, Read)

data FunDef
  = MemberFunctionDefinition [FunctionModifier]
                             LIdent
                             [ArgDef]
                             RetType
                             Expr
  | AbstractFunctionDefinition [FunctionModifier]
                               LIdent
                               [ArgDef]
                               AbsRetType
  deriving (Eq, Ord, Show, Read)

data RetType
  = ReturnType FreeTypeDef
  | InferredReturnType
  deriving (Eq, Ord, Show, Read)

data AbsRetType
  = AbsReturnType FreeTypeDef
  | AbsInferredReturnType
  deriving (Eq, Ord, Show, Read)

data FunctionModifier
  = FunctionModifier_static
  | FunctionModifier_internal
  | FunctionModifier_implement
  | FunctionModifier_final
  | FunctionModifier_unique
  deriving (Eq, Ord, Show, Read)

data ClassField
  = ModifiedClassField FieldModifier
                       LIdent
                       FreeTypeDef
  | NormalClassField LIdent
                     FreeTypeDef
  deriving (Eq, Ord, Show, Read)

data FieldModifier
  = FieldModifier_internal
  | FieldModifier_unique
  deriving (Eq, Ord, Show, Read)

data Expr
  = EDefinitionsList [AsDef]
                     Expr
  | EDefinition AsDef
                Expr
  | EMatch Expr
           [MatchClause]
  | EIfThenElse Expr
                Expr
                Expr
  | EApply Functorial
           [Arg]
  | ELambda [ArgDef]
            TypeDef
            Expr
  | EList [ListElem]
  | EEq Expr
        Expr
  | ELq Expr
        Expr
  | EGt Expr
        Expr
  | ELeq Expr
         Expr
  | EGeq Expr
         Expr
  | EAdd Expr
         Expr
  | ESub Expr
         Expr
  | EMul Expr
         Expr
  | EDiv Expr
         Expr
  | EPow Expr
         Expr
  | EInt Integer
  | EReal Double
  | EWild
  deriving (Eq, Ord, Show, Read)

data AsDef =
  IDefinition Expr
              LIdent
  deriving (Eq, Ord, Show, Read)

data MatchClause =
  IMatchClause Expr
               Expr
  deriving (Eq, Ord, Show, Read)

data Functorial
  = ThisFunctor
  | SuperFunctor
  | TypeFunctor UIdent
  | InstanceFunctor LIdent
  | MemberFunctor MFun
  deriving (Eq, Ord, Show, Read)

data Arg
  = ArgExpr Expr
  | ArgFunc Functorial
  deriving (Eq, Ord, Show, Read)

data ListElem =
  EListElem Expr
  deriving (Eq, Ord, Show, Read)

comment "#" ;
comment "#{" "}#" ;

layout "let", "where", "has", "with", "matching";
layout stop "in";

token UIdent (upper (letter | digit)*);
token LIdent (lower (letter | digit)*);

token MFun ('.' (letter | digit)*);
token Op ( '!' | '#' | '$' | '%' | '&' | '*' | '+' | '.' | '/' | '<' | '=' | '>' | '?' | '@' | '\\' | '^' | '|' | '-' | '~' )+ ;

entrypoints ProgramDef;

Program. ProgramDef ::= [ImportDef] [ClassDef] ;
terminator ClassDef "";

Import. ImportDef ::= "import" String;
terminator ImportDef "";

------------------------ ANY Type, Constrained, unconstrained, wildcard -------------------------------

terminator                       ConstrTypeParam "";
InferredTypeParam.               ConstrTypeParam ::= LIdent ;
ConcreteTypeParam.               ConstrTypeParam ::= UIdent ;
WildcardTypeParam.               ConstrTypeParam ::= "?" ; 
--AnotherClassTypeParam.           ConstrTypeParam ::= "(" TypeDef ")" ;
SuperConstrainedTypeParam.       ConstrTypeParam ::= "[" LIdent "super" [TypeDef] "]" ;
AnySuperConstrainedTypeParam.    ConstrTypeParam ::= "[" "?" "super" [TypeDef] "]" ;
DerivingConstrainedTypeParam.    ConstrTypeParam ::= "[" LIdent "deriving" [TypeDef] "]" ;
AnyDerivingConstrainedTypeParam. ConstrTypeParam ::= "[" "?" "deriving" [TypeDef] "]" ;

ConcreteType.               TypeDef ::= UIdent [ConstrTypeParam];
InferredType.               TypeDef ::= LIdent [ConstrTypeParam];
coercions                   TypeDef 1 ;
separator nonempty          TypeDef "," ;

--------------------------------- FREE type, unconstrained ----------------------------------------------

ConcreteTypeFreeType.    PrimFreeType ::= "(" FreeTypeDef ")";
TemplateFreeType.        PrimFreeType ::= LIdent ;
ConcreteFreeType.        PrimFreeType ::= UIdent ;

FreeType.           FreeTypeDef ::= UIdent [PrimFreeType] ;
InferredFreeType.   FreeTypeDef ::= LIdent [PrimFreeType] ;
coercions           FreeTypeDef 1;
terminator          PrimFreeType "" ;


--------------------------------- Function arg, usually constrained -------------------------------------

terminator ArgDef "";
ArgumentDefinition.  ArgDef    ::= "(" LIdent ":" FreeTypeDef ")" ;
InferredArgumentDef. ArgDef    ::= LIdent ;

---------------------------------------------------------------------------------------------------------

Superclass.             SuperclassType ::= FreeTypeDef;
separator nonempty      SuperclassType ",";

StructDefinition.    ClassDef  ::= [ClassModifier] "struct" UIdent "where" "{" [ClassField] "}" ;                                                  -- structure definition
ClassDefinition.     ClassDef  ::= [ClassModifier] "class" UIdent IsDeriving IsImplementing "where" "{" ClassContents "}" ;                        -- class definition
TemplateDefinition.  ClassDef  ::= [ClassModifier] "template" UIdent [ConstrTypeParam] IsDeriving IsImplementing "where" "{" ClassContents "}" ;   -- template with type parameters

Implementing.     IsImplementing ::= "implementing" [SuperclassType] ;
NotImplementing.  IsImplementing ::= ;

Deriving.    IsDeriving ::= "deriving" SuperclassType ;
NotDeriving. IsDeriving ::= ;

terminator ClassModifier "";
rules      ClassModifier ::= "module" | "interface" | "sealed" | "native" ; -- module class is internal to module, all others are exported, sealed is not to be inherited

ClassContent. ClassContents ::= [MemberDef] [FunDef] ;

EmptyMemberDefinition. MemberDef ::= UIdent DerivationDef; -- variant type definition, like Either . Left / Right
MemberDefinition.      MemberDef ::= UIdent DerivationDef "has" "{" [ClassField] "}" ; -- variant type with own fields 

Derives.                DerivationDef ::= "derives" UIdent ;
NotDerives.             DerivationDef ::= ;
separator               MemberDef ";" ;

MemberFunctionDefinition.    FunDef ::= [FunctionModifier] "function" FunctionName FunTemplateParams [ArgDef] RetType "=" Expr ;
ReturnType.                  RetType ::= ":" FreeTypeDef ;
InferredReturnType.          RetType ::= ;

FFunction.    FunctionName ::= LIdent ;
FOperator.    FunctionName ::= "(" Operator ")" ;
FOperatorDef. FunctionName ::= "(" Op ")";

Op_plus.  Operator ::= "+" ;
Op_minus. Operator ::= "-" ;
Op_mul.   Operator ::= "*" ;
Op_div.   Operator ::= "/" ;
Op_pow.   Operator ::= "^" ;
Op_less.  Operator ::= "<" ;
Op_gr.    Operator ::= ">" ;
Op_leq.   Operator ::= "<=";
Op_geq.   Operator ::= ">=";
Op_eq.    Operator ::= "==";
Op_cons.  Operator ::= ":" ;
Op_scons. Operator ::= ":'";
Op_appl.  Operator ::= "$" ;

AbstractFunctionDefinition.  FunDef ::= [FunctionModifier] "function" FunctionName FunTemplateParams [ArgDef] AbsRetType ; -- abstract function, to be implemented in subclasses
AbsReturnType.               AbsRetType ::= ":" "abstract" FreeTypeDef ;
AbsInferredReturnType.       AbsRetType ::= ;

NoFunctionTemplateParameter. FunTemplateParams ::= ;
FunctionTemplateParameters.  FunTemplateParams ::= "<" [TemplateParam] ">" ;
TemplateParameter.           TemplateParam     ::= ConstrTypeParam ;
separator nonempty           TemplateParam "," ;

separator                    FunDef ";";

terminator FunctionModifier "";
rules      FunctionModifier ::= "static" | "internal" | "implement" | "final" | "unique" | "native" ; -- like in Java, internal means private

ModifiedClassField.   ClassField ::= FieldModifier LIdent ":" FreeTypeDef ;
NormalClassField.     ClassField ::= LIdent ":" FreeTypeDef ;
separator             ClassField ";";

rules FieldModifier ::= "internal" | "unique" ;

EDefinitionsList.   Expr   ::= "let" "{" [LetDef] "}" "in" Expr ; 
EDefinition.        Expr   ::= "let" LetDef "in" Expr           ;

separator nonempty   LetDef ";" ;
IDefinition.         LetDef ::= LIdent [ArgDef] ":" FreeTypeDef "=" Expr;
IInferredDefinition. LetDef ::= LIdent [ArgDef] "=" Expr;

EMatch.             Expr  ::= "match" Expr "with" "{" [MatchClause] "}" ;
ELambdaMatch.       Expr  ::= "matching" "{" [MatchClause] "}" ;

separator nonempty  MatchClause ";" ;
IMatchClause.       MatchClause ::= Expr "->" Expr;

EIfThenElse.        Expr  ::= "if" Expr "then" Expr "else" Expr ;
EUnify.             Expr  ::= "unify" Expr "with" Expr "in" Expr;

ELambda.            Expr7 ::= "(" "\\" [ArgDef] ":" TypeDef "->" Expr ")" ; -- lambda expr
EInferredLambda.    Expr7 ::= "(" "\\" [ArgDef] "->" Expr ")" ;

EList.              Expr7 ::= "[" [ListElem] "]" ;
EEmptyList.         Expr7 ::= "[]" ;
ERange.             Expr7 ::= "[" Expr ".." Expr "]" ;
ERangeFr.           Expr7 ::= "[" Expr ".." "]" ;
EListElem.          ListElem ::= Expr ;
separator nonempty  ListElem ",";

EAppl.              Expr1 ::= Expr1 "$" Expr2;
ECons.              Expr2  ::= Expr3 ":"   Expr2;
ESCons.             Expr2  ::= Expr3 "::" Expr2;
EOp.                Expr3  ::= Expr3 Op Expr4;
EEq.                Expr2  ::= Expr3  "==" Expr3 ;
ENeq.               Expr2  ::= Expr4  "/=" Expr3 ;
EMod.               Expr2  ::= Expr3 "mod" Expr3;
ENot.               Expr2  ::= "not" Expr3;
EOr.                Expr1   ::= Expr2 "||" Expr2;
EAnd.               Expr2  ::= Expr3 "&&" Expr3;
ELt.                Expr2  ::= Expr3 "<"  Expr3 ;
EGt.                Expr2  ::= Expr3 ">"  Expr3 ;
ELeq.               Expr2  ::= Expr3 "<=" Expr3 ;
EGeq.               Expr2  ::= Expr3 ">=" Expr3 ;
EAdd.               Expr3 ::= Expr3 "+"  Expr4 ;
ESub.               Expr3 ::= Expr3 "-"  Expr4 ;
EMul.               Expr4 ::= Expr4 "*"  Expr5 ;
EDiv.               Expr4 ::= Expr4 "/"  Expr5 ;
EPow.               Expr5 ::= Expr6 "^"  Expr5 ;
ECompose.           Expr5 ::= Expr6 " . " Expr5;
ENeg.               Expr6  ::= "-" Expr7 ;

EBoolean.           Expr7 ::= Boolean ;
ETrue.              Boolean  ::= "true" ;
EFalse.             Boolean  ::= "false" ; 
EThis.              Expr7 ::= "this";
ESuper.             Expr7 ::= "super";
EVar.               Expr7 ::= LIdent ;
EType.              Expr7 ::= UIdent ;
EMember.            Expr7 ::= MFun ;
EOperator.          Expr7 ::= "(" Operator ")" ;

EInt.               Expr7 ::= Integer ;
EReal.              Expr7 ::= Double  ;
EChar.              Expr7 ::= Char ;
EString.            Expr7 ::= String ;
EWild.              Expr7 ::= "_"     ; -- wildcard variable used for matching or saving identifiers

EApply.             Expr6 ::= Expr6 Expr7 ;
--EStrictMember.      Expr5 ::= Expr6 MFun ; 

coercions           Expr 7 ;

class Void where
    unique function toString : abstract String

interface template Function a b where
    unique function call <a, b> (x: a) : abstract b

interface template Functor type where
    unique function fmap <a, b> (f: Function a b) : abstract type b

interface template Collection a implementing Functor Collection where
    unique function elemAt (i:Int) : abstract a
    unique function length : abstract Int
    unique function map <b> (f: Function a b) : abstract Collection a
    implement function fmap <b> : Function (Function a b) (Collection b) = This.map

template List a implementing Collection a where
    Empty        
    Cons  has
        head : a
        tail : List a

    implement function elemAt (i:Int) : a = if i == 0 then This.head else This.tail.elemAt (i-1)

class Main where
    unique function main (args: List String) : Void = define 2.0 as x in if x*x == 4.0 then x^3.0 else 5

interface template Collection a where
    function atIndex (i:Int) : abstract a

template Set [a deriving Comparable [? super a]] implementing Collection a where
    Set
    
template Map [a deriving Comparable [? super a]] b implementing Collection a, Collection b where
    Map has
        size : Int
        pointers : List (Map a b)

interface template Functor type where
    function fmap <a, b> (f : Function a b) : abstract type b

template Either a b implementing Functor (Either a) where
    Left has
        value : a
    Right has
        value : b

    implement function fmap <c> (f : Function b c) : Either a c = match this with
        Left _ -> this
        Right val -> Right (f c)

native class Integer deriving Numeric where
    native function (+) (y : Integer) : abstract Integer

import "Std.Base"
import "Std.Functor"
import "Std.Maybe"
import "Std.Collections"
import "Std.String"

template List a implementing Collection a where
    Empty
    Cons has
        head : a
        tail : List a

    implement function elemAt (i:Int) : a = if i == 0 then this.head else this.tail.elemAt (i-1)
    implement function length : Int = if this.null then 0 else 1 + this.tail.length

    function (:) (x:a) : List a = List.Cons x this

    function null : Bool = this == List.Empty
    static function empty : List a = List.Empty

    function map <b> (f: Function a b) : List b = if this.null then this.empty else f (this.head) : this.tail.map f #to be lazy, not - this.foldr ((:) . f) (List.Empty)

    function take (am : Int) : List a = if (this.null) || am == 0 then this.empty else (this.head) : this.tail.take (am-1)
    function drop (am : Int) : List a = if (this.null) || am == 0 then this.empty else this.tail.drop (am-1)

    function foldl <b> (f: Function b (Function a b)) (acc : b) : b = if this.null then acc
        else this.tail.foldl f $ f acc (this.head)

    function foldr <b> (f: Function a (Function b b)) (acc : b) : b = if this.null then acc
        else f $ this.head $ this.tail.foldr f acc

    function reverse : List a = this.foldl ((:).flip) (this.empty)

    function zipWith <b,c> (f: Function a (Function b c)) (other : List b) : List c = if this.null || other.null then this.empty
        else List.Cons $ f (this.head) (other.head) $ this.tail.zipWith f (other.tail)

    function maybeHead : a = if this.null then Nothing else Maybe.Just $ this.head

    function (++) (l: List a) : List a = if this.null then l else this.head : (this.tail) ++ l

    function intersperse (elem:a) : List a = if this.null then this else if this.tail == this.empty then this else (this.head) : elem : (this.tail.intersperse elem)

    function toString : String = "[" ++ ((this.map (^toString)).intersperse ", ").foldr (++) (String.Empty) ++ "]"
    static function replicate (amount:Int) (elem:a) : List a = if amount == 0 then List.empty else elem : List.replicate (amount-1) elem

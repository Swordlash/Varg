class Void where
    Void

class Bool where
    True
    False
    
class Native where
    static function toString (obj : Void) : String = obj.toString

interface template Function a b where
	function flip <a, b, c> (x:a) (y:b) : c = this y x
	function call (x:a) : b = this x
	function compose <a, b, c> (f: Function b c) : Function a c = (\x -> f (this x))

	static function flipI <a, b, c> (f: Function a (Function b c)) (x:a) (y:b) : c = f.flip x y
	static function callI (f: Function a b) (x:a) : b = f.call x
	static function composeI <a, b, c> (f: Function b c) (g: Function a b) : Function a c = g.compose f

template Enumerable a where
    unique function rangeTo (other : a) : List a = if this <= other then this : this.incr.rangeTo other else []
    unique function rangeFrom : List a = this : this.incr.rangeFrom
    unique function incr : abstract a

class Char deriving Enumerable Char where
    function toString : String = String.Cons this $ String.Empty
    function incr = this.toUTFCode.incr.codeToChar
    function rangeTo (other : Char) : List Char = if this.toUTFCode <= other.toUTFCode then this : this.incr.rangeTo other else []

class Int deriving Enumerable Int where
    implement function incr = this + 1

class Real deriving Enumerable Real where
    implement function incr = this + 1.0

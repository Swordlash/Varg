class Void where
    Void
    function call : Void = return this

class Bool where
    True
    False
    
class Native where
    static function toString (obj : Void) : String = obj.toString

interface template Function a b where
	function flip <a, b, c> (x:a) (y:b) : c = this y x
	function call (x:a) : b = this x
	function compose <a, b, c> (f: Function b c) : Function a c = (\x -> f $ this x)

interface template Enumerable a where
    unique function rangeTo (other : a) : List a = if this <= other then this : this.incr.rangeTo other else []
    unique function rangeFrom : List a = this : this.incr.rangeFrom
    unique function incr : abstract a

class Char implementing Enumerable Char where
    function toString : String = String.Cons this $ String.Empty
    function incr = this.toUTFCode.incr.codeToChar
    function rangeTo (other : Char) : List Char = if not (this.codeAfter other) then this : this.incr.rangeTo other else []
    function codeBefore (other : Char) : Bool = this.toUFTCode < other.toUTFCode
    function codeAfter (other : Char) : Bool = this.toUTFCode > other.toUTFCode

class Int implementing Enumerable Int where
    implement function incr = this + 1

class Real implementing Enumerable Real where
    implement function incr = this + 1.0

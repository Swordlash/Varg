import "Std.Overture"
import "Std.Map.Color"

# Red-black tree map, rewritten into Varg from from github:Abhiroop/okasaki
template Map [a deriving Comparable a] b where
    Empty
    Node has
        color : Color
        left : Map a b
        value : Tuple a b
        right : Map a b

    static function null : Bool = this == Map.Empty
    static function empty<a, b> : Map a b = Map.Empty

    function size : Int = if this.null then 0 else 1 + this.left.size + this.right.size

    function blacken : Map a b = if this.null then this else unify Map.Node _ l v r with this in Map.Node (Color.Black) l v r

    function lookup (key : a) : Maybe b = match this with
        Map.Empty -> Maybe.Nothing
        Map.Node _ l (k,v) r -> if key < k then l.lookup key else if key == k then Maybe.Just v else r.lookup key

    function balance : Map a b = 
        let black = Color.Black 
            red = Color.Red 
            node = Map.Node
                in match this with
                    node black (node red (node red a x b) y c) z d -> node red (node black a x b) y (node black c z d)
                    node black (node red a x (node red b y c)) z d -> node red (node black a x b) y (node black c z d)
                    node black a x (node red (node red b y c) z d) -> node red (node black a x b) y (node black c z d)
                    node black a x (node red b y (node red c z d)) -> node red (node black a x b) y (node black c z d)
                    _ -> this

    function insert (x : Tuple a b) = let ins tree = match tree with
        Map.Empty -> Map.Node (Color.Red) (Map.Empty) x (Map.Empty)
        Map.Node col l (k,v) r -> unify (k1,v1) with x in
            if k1 < k then Map.Node col (ins l) (k,v) r
            else if k1 == k then Map.Node col l x r
            else Map.Node col l (k,v) (ins r)
                in (ins this).balance.blacken

    function delete (x:Tuple a b) : Map a b = (this.del x).blacken

    internal function del (x : Tuple a b) : Map a b = if this.null then this else unify ((k1,v1), Map.Node _ l (k,v) r) with (x, this) in
        if k1 < k then this.delL x
        else if k1 > k then this.delR x
        else l.fuse r

    internal function delL (x:Tuple a b) : Map a b = match this with
        Map.Node _ t1 y t2 -> match t1 with
            Tree.Node (Color.Black) _ _ _ -> (Tree.Node (Color.Black) (t1.del x) y t2).balL
            _ -> Tree.Node (Color.Red) (t1.del x) y t2

    internal function balL : Map a b = 
        let black = Color.Black
            red = Color.Red
            node = Map.Node 
                in match this with
                    node black (node red t1 x t2) y t3 -> node red (node black t1 x t2) y t3
                    node black t1 y (node black t2 z t3) -> (node black t1 y (node red t2 z t3)).balance
                    node black t1 y (node red (node black t2 u t3) z t4) -> unify Map.Node black l val r with t4 in
                        node red (node black t1 y t2) u $ (node black t3 z (node red l val r)).balance

    internal function delR (x:Tuple a b) : Map a b = match this with
        Map.Node _ t1 y t2 -> match t2 with
            Map.Node (Color.Black) _ _ _ -> (Map.Node (Color.Black) t1 y (t2.del x)).balR
            _ -> Map.Node (Color.Red) t1 y (t2.del x)

    internal function balR : Map a b = 
        let black = Color.Black
            red = Color.Red
            node = Map.Node 
                in match this with
                    node black t1 y (node red t2 x t3) -> node red t1 y (node black t2 x t3)
                    node black (node black t1 z t2) y t3 -> (node black (node red t1 z t2) y t3).balance
                    node black (node red (node black l val r) z (node black t2 u t3)) y t4 -> node red ((node black (node red l val r) z t2).balance) u (node black t3 y t4)
        
    internal function fuse (other : Map a b) : Map a b = 
        let black = Color.Black
            red = Color.Red
            node = Map.Node
                in match (this, other) with
                    (Map.Empty, _) -> other
                    (_, Map.Empty) -> this
                    (node black _ _ _, node red t3 y t4) -> node red (t1.fuse t3) y t4
                    (node red t1 x t2, node black _ _ _) -> node red t1 x (t2.fuse t3)
                    (node red t1 x t2, node red t3 y t4) -> let s = t2.fuse t3 in match s with
                        node red s1 z s2 -> node red (node red t1 x s1) z (node red s2 y t4)
                        node black _ _ _ -> node red t1 x (node red s y t4)
                    (node black t1 x t2, node black t3 y t4) -> let s = t2.fuse t3 in match s with
                        node red s1 z s2 -> node red (node black t1 x s1) z (node black s2 y t4)
                        node black s1 z s2 -> (node black t1 x (node black s y t4)).balL
